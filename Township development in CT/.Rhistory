x
riskLevel <- factor(c("MEDIUM","HIGH","HIGH","LOW","MEDIUM"), levels=c("LOW","MEDIUM","HIGH"))
riskLevel
factor(c("MEDIUM","HIGH","HIGH","LOW","MEDIUM"), levels=c("LOW","MEDIUM","HIGH"))
factor(c("MEDIUM","HIGH","HIGH","LOW","MEDIUM"))
factor(c("MEDIUM","HIGH","HIGH","LOW","MEDIUM"))
quiz <- as.factor(c("B-", "A", "B+", NA, "A+", NA, "A", "F", "C-", "C"))
quiz
as.factor(c("B-", "A", "B+", NA, "A+", NA, "A", "F", "C-", "C"))
factor(c("B-", "A", "B+", NA, "A+", NA, "A", "F", "C-", "C"))
x<-data.far
x<-data.frame("hh"=c(1,2,3))
x
x$shit<-2
x
x$fuck<-c(1,4,5)
x
Employ<-read.csv("/Users/mahaoxi/Desktop/5225/homework3/employee.csv",
header=FALSE)
Employ<-read.csv("/Users/mahaoxi/Desktop/5225/homework3/employee.csv",
header=FALSE)
View(Employ)
Employ<-read.csv("/Users/mahaoxi/Desktop/5225/homework3/employee.csv",
header=FALSE)
install.packages("knitr")
library(kintr)
library(knitr)
kable(head(Employ), format = "html")
names(Employ)
aggregate(Employ,by=list(Employ$V1),mean)
aggregate(Employ,by=list(em=Employ$V1),mean)
aggregate(Employ,by=list(V1=Employ$V1),mean)
?option
grep("//d*",x)
isZipCode<-function(x){
grep("//d*",x)
}
isZipCode(7)
isZipCode(5)
isZipCode("5")
isZipCode("5678")
source('~/.active-rstudio-document')
isZipCode("6")
isZipCode("32893294")
isZipCode("3289329ds")
isZipCode("3289fsadas")
isZipCode("sadas")
isZipCode("")
isZipCode(a)
isZipCode(2)
isZipCode(4)
isZipCode(f)
isZipCode("f)
isZipCode("f)
isZipCode("f")
source('~/.active-rstudio-document')
isZipCode("dsadsd")
isZipCode("06250")
isZipCode("6250")
isZipCode("625")
isZipCode("31233")
isZipCode(31233)
isZipCode(01233)
xstring<-"regular expressions are very powerful"
zstring<-gusb("^\\s+|\\s+$","",xstring)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
zstring
xstring
gsub("(\\w)(\\w)","\\u\\1\\l\\2",zstring,perl=TRUE)
gsub("(\\w)(\\w*)","\\u\\1\\l\\2",zstring,perl=TRUE)
gsub("(\\w)(\\w*)","\\U\\1\\L\\2",zstring,perl=TRUE)
gsub("(\\W)(\\W*)","\\U\\1\\L\\2",zstring,perl=TRUE)
final<-readLines("https://dribbble.com/shots/3133665-Creation-of-Adam")
final<-readLines("https://dribbble.com/shots/3133665-Creation-of-Adam")
final
str(final)
length(final)
x<-"ss"
dsa
final<-readLines("https://dribbble.com/shots/3133665-Creation-of-Adam")
x<-"ss"
length(x)
x<-"dsdasdasda"
length(x)
grep('<ul class="color-chips group">',final)
grep('<ul class=\"color-chips group\">',final)
grep('</ul',final)
final[570:595]
grep('<ul class="color-chips group">',final)
grep('</ul',final)
final[570:595]
final<-final[570:595]
grepl("background-color",final)
grepl('"background-color"',final)
grepl("background-color",final)
sum(grepl("background-color",final))
color<-grep("background-color",final,value=TRUE)
color
gregexpr("#[0-9A-Z]{6}",color)
substr(color,37,37+6)
sub("(.*)background-color:|\".*","",color)
color
sub("(.*)background-color:\".*","",color)
sub("(.*)background-color:|\".*","",color)
sub("(.*)background-color:.*","",color)
sub("(.*)background-color:","",color)
sub("(.*)background-color:","",color)
sub("|\".*","",color)
sub("\".*","",color)
isZipcode<-function(x){
grepl("\\d",x)
}
isZipcode(1)
isZipcode("1")
isZipcode("12")
isZipcode<-function(x){
grep("\\d",x)
}
isZipcode("12")
isZipcode("z")
isZipcode<-function(x){
grep("\\d*",x)
}
isZipcode("231534315")
isZipcode("23153z315")
isZipcode("23153315")
isZipcode<-function(x){
grep("\\d{5}",x)
}
isZipcode("23153315")
source('~/.active-rstudio-document')
isZipcode("31321dasdas")
isZipcode("dasdas")
isZipcode<-function(x){
grep("\\d{5}",x)
}
isZipcode("dasdas")
isZipcode("dasdas1234")
isZipcode("dasdas12345")
isZipcode<-function(x){
grep("^\\d{5}$",x)
}
isZipcode("dasdas12345")
isZipcode("06250")
isZipcode("0")
isZipcode("00000")
gsub("[a-zA-Z0-9.+-_]+@([a-zZ-A0-9.-]+\\.[a-zA-Z]{2,63})","\\1",
"haoxi.ma@uconn.edu")
gsub("[a-zA-Z0-9.+-_]+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\1",
"haoxi.ma@uconn.edu")
gsub("[a-zA-Z0-9.+-_]+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\1",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\1",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub('([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,63})',"\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@uconn.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\2",
"haoxi.ma@.edu")
gsub("([a-zA-Z0-9.+-_]*)+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})","\\1",
"haoxi.ma@.edu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})",
"haoxi.ma@.edu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})",
"haoxi.ma@uconn.edu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+.[a-zA-Z]{2,63})",
"haoxi.ma@uconn.edu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+.[a-zA-Z]{2,63})",
"haoxi.ma@uconnedu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+.[a-zA-Z]{2,63})",
"haoxi.ma@uconnedu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,63})",
"haoxi.ma@uconnedu")
grep("([a-zA-Z0-9.+-_])+@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})",
"haoxi.ma@uconnedu")
1-exp(-2/3)
pf(1,1,1)
pnorm(0)
pnorm(0,0,1)
pexp(4,1/6)
1-pexp(4,1/2)
exp(-2)
pgamma(7,2,6)
pgamma(7,2,1\6)
pgamma(4,1,6)
pgamma(4,1,1/6)
pgamma(7,2,1/6)
1-pgamma(7,2,1/2)
3.4*3
pgamma(10.2,3,1/6)
1-pgamma(10.2,3,1/2)
2.8*4
pgamma(11.2,4,1/6)
1-pgamma(11.2,4,1/2)
qchisq(0.95,1)
exp(1.0986)
1-pchisq(8.4982,1)
1-pchisq(35.5784,21)
exp(0.1743)
qnorm
qnorm(0.025)
0.1743+1.96*c(-0.0231,0.0231)
mhx<-0.1743+1.96*c(-0.0231,0.0231)
exp(mhx)
1.7839^2
2467.16+2.14+119.3+5.71+17.69
2467.16+2.14
2467.16+2.14+119.3
2467.16+2.14+119.3+5.71
2612-2467.16
2612-2469.3
2612-2588.6
2612-2594.31
17.69+5.71
10*log(2612/10)+2
log(261.2)
log(261.2)*10
10*log(144.84/10)+2*2
10*log(142.7/10)+2*3
〖AIC〗_4=10*log(23.4/10)+2*4
10*log(23.4/10)+2*4
10*log(17.69/10)+2*5
10*log(23.4/10)+2*4
10*log(17.69/10)+2*5
17.69/5
2612/3.54-(10-2)
2612/3.54
737.8531-8
144.84/3.54-(10-2*2)
142.7/3.54-(10-2*3)
23.4/3.54-(10-2*4)
17.69/3.54-(10-2*5)
1.92/(1-0.44)
1-0.44
1.92/0.56
0.7/(1-0.71)
0.14/(1-0.25)
(-2.37)/(1-0.52)
(-0.01)/(1-0.12)
(-1.46)/(1-0.33)
0.75/(1-0.51)
(-1.1)/(1-0.38)
1.92/(1-0.24)
(-0.5)/(1-0.5)
x<-3.428571^2+2.413793^2+0.1866667^2+-4.9375^2
-4.9375^2
x<-3.428571^2+2.413793^2+0.1866667^2+(-4.9375)^2+(-0.01136364)^2
(-4.9375)^2
x<-3.428571^2+2.413793^2+0.1866667^2+(-4.9375)^2+(-0.01136364)^2+(-2.179104)^2+1.530612^2+(-1.774194)^2+2.526316^2+1
x
2.3-3.5
1.7-3.5
1.2-1.6
0.9-1.6
15+10+20
106.984-75.787
106.984-67.442
31+6.5+1.75
1-pchisq(39.542,4)
exp(1.33)
8.95918^2
80.27+64.38+2*-15.47+9*58.78+6*-3.28+6*8.28
(-47.17882-1.07436+3*16.96087)/√672.73
(-47.17882-1.07436+3*16.96087)/sqrt(672.73)
-47.17882-1.07436+3*16.96087
sqrt(672.73)
1-pt(abs(0.1013774),55)
2*(1-pt(abs(0.1013774),55))
0.90565-1.07436+10.82241*0.02+16.96087*0.1
ex pa(1.743825)
exp((1.743825)
exp(1.743825)
69.249-67.442
0.0566+1.7506
1-pchisq(1.807,2)
67.442/55
sqrt(0.27)
sqrt(0.28)
0.7004/0.5196152
(-0.5881)/0.5291503
1.1843/0.5291503
1-pt(1.347921,27)
2*(1-pt(1.347921,27))
2*(1-pt(1.111404,27))
2*(1-pt(2.238116,27))
41.054-33.672
1-pchisq(7.382,2)
30/100
0.7004-0.5881*0.3+1.1843*0.5
0.3^2*0.28+0.5^2*0.28+2*0.3*0.5*-0.04
0.09*0.28+0.25*0.28+0.6*0.5*-0.04
qnorm(0.1)
qnorm(0.25)
qnorm(0.025)
qnorm(0.05)
sqrt(0.0832)
1.11612-1.64*0.2884441
1.11612+1.64*0.2884441
1/(1/0.6430717+1)
1/0.6430717
1/2.555
1/(1/1.589168+1)
1-0.3913894
1-0.6137755
30-17
10/17
9/13
17*13
13+5+11+6+13+13+5+13+13+6+6+7+13+7+13+13+13
8+2+7+8+7+7+6+6
17*13
221-170-51
170/221
(-47.17882-1.07436+3*16.96087)/sqrt(672.73)
2*(1-pnorm(0.1013774,0,1))
2*(1-pnorm(0.1013774))
2(1-pnorm(1.347921))
2*(1-pnorm(1.347921))
2*(1-pnorm(1.111404))
2*(1-pnorm(2.238116))
0.6430717/(1+0.6430717)
setwd("/Users/mahaoxi/Desktop/project/Township development in CT")
crime<-read.csv("crime.csv")
View(crime)
#retrive table from internet
library(dplyr)
tbl_df(crime)
str(crime)
mhx<-crime %>% select(starts_with("V"))
View(mhx)
mhx<-crime %>% select(starts_with(V))
mhx<-crime %>% select(ends_with("e"))
mhx<-crime %>% select(ends_with("e")) %>% arrange(Value)
mhx<-crime %>% select(ends_with("e")) %>% arrange(desc(Value))
library(tidyr)
mhxx<-crime%>%gather(Year)
View(mhxx)
mhxx<-crime%>%gather(Year,number)
mhxx<-crime%>%gather(Year,fuck)
mhxx<-crime%>%gather(Year,number,Town)
mhxx<-crime%>%gather(AA,number,Town)
mhxx<-crime%>%gather(AA,number,Town,FIPS)
mhxx<-crime%>%separate(Variable,c("A","B"),sep=" ")
mhxx<-mhxx%>%unite(Variable,c("A","B"),sep=" ")
setwd
setwd("/Users/mahaoxi/Desktop/project/Township development in CT")
crime<-read.csv("crime.csv")
register_google(key="AIzaSyAwG6H0vMmhNDmFJnJC6-KV0KwWbAYUl5M")
setwd("/Users/mahaoxi/Desktop/project/Township development in CT")
crime<-read.csv("crime.csv")
register_google(key="AIzaSyAwG6H0vMmhNDmFJnJC6-KV0KwWbAYUl5M")
library(XML)
register_google(key="AIzaSyAwG6H0vMmhNDmFJnJC6-KV0KwWbAYUl5M")
library(ggmap)
register_google(key="AIzaSyAwG6H0vMmhNDmFJnJC6-KV0KwWbAYUl5M")
myurl<-"https://en.wikipedia.org/wiki/List_of_Connecticut_locations_by_per_capita_income"
#data comes from 2011-2015 American Community Survey 5-Year Estimates
download.file(url=myurl, destfile = "CTincomes.html", method = "curl")
doc<-htmlParse("CTincomes.html")
table<-getNodeSet(doc,"//table")
tb<-readHTMLTable(table[[3]])
#refine income table
income<-tb[-1,-1]
nam<-c("Town","Type","County","Per.income",
"Median.household.income","Median.family.income","Population","Num.households")
rownames(income)<-1:nrow(income)
names(income)<-nam
#get lat and lon
total_crime<-crime %>% filter(str_detect(Crime.Type,"Total Crime")) %>%
filter(str_detect(Measure.Type,"Rate"))
towns<-total_crime$Town
paste_town<-function(town){
paste(town,", CT, US",sep="")
}
loc<-unlist(lapply(towns,paste_town))
total_crime$Town<-loc
town_unique<-unique(total_crime$Town)
Lat_Lon<-lapply(town_unique,geocode)
lat_lon<-unlist(Lat_Lon)
lat_lon<-as.vector(lat_lon)
ma_lat_lon<-matrix(lat_lon,ncol=2,byrow=TRUE)
town_lat_lon<-data.frame(Town=town_unique,Longitude=ma_lat_lon[,1],Latitude=ma_lat_lon[,2])
crime.lat<-merge(total_crime,town_lat_lon)
#merge income and crime.lat
income$Town<-lapply(income$Town,paste_town)
crime.income<-merge(crime.lat,income)
crime.income$Town<-factor(crime.income$Town)
str(crime.income)#County and Type have redundancy levels
crime.income<-crime.income[crime.income$County!="",]
crime.income$County<-factor(crime.income$County)
crime.income<-crime.income[crime.income$Type!="",]
crime.income$Type<-factor(crime.income$Type)
crime.income<-arrange(crime.income,Town,Year)
md.pattern(crime.income)
#density plot for towns' distribution
CTMap<-qmap("Connecticut",zoom=8,legend="topleft")
CTheat<-CTMap+geom_density2d(data=crime.income,aes(x=Longitude,y=Latitude),size=0.3)+
stat_density2d(data=crime.income,aes(x=Longitude,y=Latitude,fill=..level..,alpha=..level..),
size=0.01,bins=20,geom="polygon")+
scale_fill_gradient(low="yellow",high="violet")+
scale_alpha(range=c(0.1,0.2),guide=FALSE)+
ggtitle("The Heat Map of Towns' distribution in Connecticut")+
theme(legend.position = "bottom")
CTheat
#add cities location to heat plot
city<-crime.income[!duplicated(crime.income$Town),]
city<-city %>% filter(Type=="City")
ctheat<-CTheat+geom_point(aes(x=Longitude,y=Latitude),data=city,color="red",shape=1)
ctheat
#clustering
#summarize dataset
crime.income$Per.income<-as.numeric(gsub("[\\$,]","",crime.income$Per.income))
crime.income$Median.household.income<-as.numeric(gsub("[\\$,]","",crime.income$Median.household.income))
crime.income$Median.family.income<-as.numeric(gsub("[\\$,]","",crime.income$Median.family.income))
crime.income$Population<-as.numeric(gsub(",","",crime.income$Population))
crime.income$Num.households<-as.numeric(gsub(",","",crime.income$Num.households))
names(crime.income)
data.cluster<-crime.income[c("Town","Value","Per.income","Median.household.income","Median.family.income",
"Population","Num.households")]
data.cluster<-data.cluster %>% group_by(Town) %>% mutate(meancrime = mean(Value))
data.cluster<-data.cluster[,-2]
data.cluster<-data.cluster[!duplicated(data.cluster$Town),]
str(data.cluster)
data.cluster<-as.data.frame(data.cluster)
rownames(data.cluster)<-data.cluster$Town
data.cluster<-data.cluster[,-1]
#do clustering
data.cluster<-scale(data.cluster)
kmeans<-kmeans(data.cluster,centers=3,nstart=25)
str(kmeans)
fviz_cluster(kmeans,data=data.cluster,geom="point")
myurl<-"https://en.wikipedia.org/wiki/List_of_Connecticut_locations_by_per_capita_income"
#data comes from 2011-2015 American Community Survey 5-Year Estimates
download.file(url=myurl, destfile = "CTincomes.html", method = "curl")
doc<-htmlParse("CTincomes.html")
table<-getNodeSet(doc,"//table")
tb<-readHTMLTable(table[[3]])
#refine income table
income<-tb[-1,-1]
nam<-c("Town","Type","County","Per.income",
"Median.household.income","Median.family.income","Population","Num.households")
rownames(income)<-1:nrow(income)
names(income)<-nam
#get lat and lon
total_crime<-crime %>% filter(str_detect(Crime.Type,"Total Crime")) %>%
filter(str_detect(Measure.Type,"Rate"))
towns<-total_crime$Town
paste_town<-function(town){
paste(town,", CT, US",sep="")
}
loc<-unlist(lapply(towns,paste_town))
total_crime$Town<-loc
town_unique<-unique(total_crime$Town)
Lat_Lon<-lapply(town_unique,geocode)
lat_lon<-unlist(Lat_Lon)
lat_lon<-as.vector(lat_lon)
ma_lat_lon<-matrix(lat_lon,ncol=2,byrow=TRUE)
town_lat_lon<-data.frame(Town=town_unique,Longitude=ma_lat_lon[,1],Latitude=ma_lat_lon[,2])
crime.lat<-merge(total_crime,town_lat_lon)
library(XML)
#retrive table from internet
library(dplyr)
library(stringr)
#data refine and string modify
library(mice)
#check missing value
library(ggplot2)
library(ggmap)
#draw spatial map
library(factoextra)
#do clustering
myurl<-"https://en.wikipedia.org/wiki/List_of_Connecticut_locations_by_per_capita_income"
#data comes from 2011-2015 American Community Survey 5-Year Estimates
download.file(url=myurl, destfile = "CTincomes.html", method = "curl")
doc<-htmlParse("CTincomes.html")
table<-getNodeSet(doc,"//table")
tb<-readHTMLTable(table[[3]])
#refine income table
income<-tb[-1,-1]
nam<-c("Town","Type","County","Per.income",
"Median.household.income","Median.family.income","Population","Num.households")
rownames(income)<-1:nrow(income)
names(income)<-nam
#get lat and lon
total_crime<-crime %>% filter(str_detect(Crime.Type,"Total Crime")) %>%
filter(str_detect(Measure.Type,"Rate"))
towns<-total_crime$Town
paste_town<-function(town){
paste(town,", CT, US",sep="")
}
loc<-unlist(lapply(towns,paste_town))
total_crime$Town<-loc
town_unique<-unique(total_crime$Town)
Lat_Lon<-lapply(town_unique,geocode)
