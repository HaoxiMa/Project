X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
estsX = matrix(0,nrow=(1+length(X)),ncol=2)
estsX
n = length(X)
n
A = rep(0,n)
A
estsX[1,] = c(mean(X),log(var(X)))
estsX
cat(mean(X[-i]),log(var(X[-i])),"\n")
for (i in 1:n) {
cat(mean(X[-i]),log(var(X[-i])),"\n")
estsX[1+i,] = c(mean(X[-i]),log(var(X[-i])))
A[i] = n*estsX[1,2] - (n-1)*estsX[i+1,2]
}
cat(mean(X[-i]),log(var(X[-i])),"\n")
i
X[-1]
length(x[-1])
length(X[-1])
X[-2]
X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
x
mhx<-c(1,2,3,4)
mhx[-2]
cat(mean(X),log(var(X)),"\n")
X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
estsX = matrix(0,nrow=(1+length(X)),ncol=2)
n = length(X)
A = rep(0,n)
cat(mean(X),log(var(X)),"\n")
estsX[1,] = c(mean(X),log(var(X)))
for (i in 1:n) {
cat(mean(X[-i]),log(var(X[-i])),"\n")
estsX[1+i,] = c(mean(X[-i]),log(var(X[-i])))
A[i] = n*estsX[1,2] - (n-1)*estsX[i+1,2]
}
V1 = var(A)/n
X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
estsX = matrix(0,nrow=(1+length(X)),ncol=2)
n = length(X)
A = rep(0,n)
cat(mean(X),log(var(X)),"\n")
for (i in 1:n) {
estsX[1+i,] = c(mean(X[-i]),log(var(X[-i])))
A[i] = n*estsX[1,2] - (n-1)*estsX[i+1,2]
}
estsX
pie_explode <- function (x, labels = names(x), edges = 200, radius = 0.8,
clockwise = FALSE,
explode = 1,
explode_rad = 0.1,
init.angle = if (clockwise) 90 else 0, density = NULL, angle = 45,
col = NULL, border = NULL, lty = NULL, main = NULL, ...)
{
if (!is.numeric(x) || any(is.na(x) | x < 0))
stop("'x' values must be positive.")
if (is.null(labels))
labels <- as.character(seq_along(x))
else labels <- as.graphicsAnnot(labels)
x <- c(0, cumsum(x)/sum(x))
dx <- diff(x)
nx <- length(dx)
plot.new()
pin <- par("pin")
xlim <- ylim <- c(-1, 1)
if (pin[1L] > pin[2L])
xlim <- (pin[1L]/pin[2L]) * xlim
else ylim <- (pin[2L]/pin[1L]) * ylim
dev.hold()
on.exit(dev.flush())
plot.window(xlim, ylim, "", asp = 1)
if (is.null(col))
col <- if (is.null(density))
c("white", "lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk")
else par("fg")
if (!is.null(col))
col <- rep_len(col, nx)
if (!is.null(border))
border <- rep_len(border, nx)
if (!is.null(lty))
lty <- rep_len(lty, nx)
angle <- rep(angle, nx)
if (!is.null(density))
density <- rep_len(density, nx)
twopi <- if (clockwise)
-2 * pi
else 2 * pi
t2xy <- function(t,rad= radius) {
t2p <- twopi * t + init.angle * pi/180
list(x = rad * cos(t2p),
y = rad * sin(t2p))
}
t2xy_explode <- function(t) {
t2p <- twopi * t + init.angle * pi/180
list(x = (radius) * cos(t2p) + explode_rad * cos(angle_expl),
y = (radius) * sin(t2p) + explode_rad * sin(angle_expl))
}
for (i in 1L:nx) {
n <- max(2, floor(edges * dx[i]))
if(i==explode){
# origin - exploded
xy_expl <- t2xy(mean(x[i + 0:1]),rad=(radius+explode_rad))
angle_expl <- atan2(y = xy_expl$y, x = xy_expl$x)
origin_expl <- c(explode_rad*cos(angle_expl),explode_rad*sin(angle_expl))
P <- t2xy_explode(seq.int(x[i],
x[i + 1],
length.out = n))
polygon(c(P$x, origin_expl[1]), c(P$y, origin_expl[2]),
density = density[i], angle = angle[i],
border = border[i], col = col[i], lty = lty[i])
P <- t2xy_explode(mean(x[i + 0:1]))
lab <- as.character(labels[i])
}else{
P <- t2xy(seq.int(x[i], x[i + 1], length.out = n))
polygon(c(P$x, 0), c(P$y, 0), density = density[i], angle = angle[i],
border = border[i], col = col[i], lty = lty[i])
P <- t2xy(mean(x[i + 0:1]))
lab <- as.character(labels[i])
}
if (!is.na(lab) && nzchar(lab)) {
lines(c(1, 1.05) * P$x, c(1, 1.05) * P$y)
text(1.1 * P$x, 1.1 * P$y, labels[i], xpd = TRUE,
adj = ifelse(P$x < 0, 1, 0), ...)
}
}
title(main = main, ...)
invisible(NULL)
}
rm(list=ls())
rm
# initialize variables
est=matrix(0,B,2)
boot = function(n1,n2,B){
# n1, n2 = sample size for two samples
# B = number of bootstrap samples
# initialize variables
est=matrix(0,B,2)
colnames(est) =c("mdiff", "vratio")              # column names of matrix est
out = vector("list",2)
names(out)=c("bootstats","actual")
actual = c(mean(Y1)-mean(Y2),var(Y1)/var(Y2))
names(actual) = c("mdiff", "vratio")
for (i in 1:B){                                  # boot loop
idx1 = sample(1:n1,n1,replace=TRUE)            # select indices for bootstrap sample for Y1
idx2 = sample(1:n2,n2,replace=TRUE)            # select indices for bootstrap sample for Y2
Ystar1= Y1[idx1]
Ystar2= Y2[idx2]
est[i,1]=mean(Ystar1)-mean(Ystar2)             # difference of two means
est[i,2]=var(Ystar1)/var(Ystar2)               # ratio of two variances
}
X = c(0.6948474, 1.3728079, 1.6054925, 1.6521874, 1.6604260, 1.7194129, 1.8029659,
1.8196424, 1.8389887, 1.9090767, 2.0500408, 2.0643692, 2.2139215, 2.2497530,
2.4589947, 2.7903993, 3.1704319, 3.1854975, 3.1931131, 3.5149202)
Y = c(0.3834938, 1.0024352, 2.3930820, 3.0204720, 3.5359811, 3.5939870, 3.8954334,
4.1358249, 4.2086318, 4.2589137, 4.3502866, 4.4111497, 4.4784124, 4.6501416,
4.9571753, 5.1854724, 5.7368668, 5.9600031, 6.1381765, 6.3221253, 6.5937217,
7.1933042, 7.9380756, 7.9590619, 8.3538758)
setwd("/Users/mahaoxi/Desktop/COVIDchallenge_Uconn STAT team/Useful dataset")
mhx<-read.csv("Risk_neig.csv")
View(mhx)
mhx
mhx<-mhx[,c(2,22)]
write.csv(mhx,"Neighborhood_risk.csv")
